{"ast":null,"code":"import axios from 'axios';\nimport { getMockPortfolio, mockBuyStock, mockSellStock, mockProgressDay, mockResetPortfolio, mockCreateStock } from './mockData';\n\n// Flag to determine whether to use mock data or real API\nconst USE_MOCK_DATA = true;\nconst API_URL = '/api/portfolio';\nexport const getPortfolio = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return getMockPortfolio();\n  }\n  const response = await axios.get(API_URL);\n  return response.data;\n};\nexport const getStocks = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return getMockPortfolio().stocks;\n  }\n  const response = await axios.get(`${API_URL}/stocks`);\n  return response.data;\n};\nexport const getStockPool = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return getMockPortfolio().stockPool;\n  }\n  const response = await axios.get(`${API_URL}/pool`);\n  return response.data;\n};\nexport const buyStock = async (symbol, quantity) => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const result = mockBuyStock(symbol, quantity);\n    return {\n      symbol,\n      quantity,\n      price: result.price,\n      type: 'BUY',\n      date: new Date().toISOString()\n    };\n  }\n  const response = await axios.post(`${API_URL}/buy`, {\n    symbol,\n    quantity\n  });\n  return response.data;\n};\nexport const sellStock = async (symbol, quantity) => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const result = mockSellStock(symbol, quantity);\n    return {\n      symbol,\n      quantity,\n      price: result.price,\n      type: 'SELL',\n      date: new Date().toISOString()\n    };\n  }\n  const response = await axios.post(`${API_URL}/sell`, {\n    symbol,\n    quantity\n  });\n  return response.data;\n};\nexport const progressDay = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    mockProgressDay();\n    return getMockPortfolio();\n  }\n  const response = await axios.post(`${API_URL}/progress-day`);\n  return response.data;\n};\nexport const resetPortfolio = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    mockResetPortfolio();\n    return getMockPortfolio();\n  }\n  const response = await axios.post(`${API_URL}/reset`);\n  return response.data;\n};\nexport const savePortfolio = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    // In mock mode, we don't need to do anything for save\n    return;\n  }\n  await axios.post(`${API_URL}/save`);\n};\nexport const loadPortfolio = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    // In mock mode, just return the current portfolio\n    return getMockPortfolio();\n  }\n  const response = await axios.post(`${API_URL}/load`);\n  return response.data;\n};\nexport const createStock = async (name, symbol, sector) => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    mockCreateStock(name, symbol, sector);\n    const portfolio = getMockPortfolio();\n    return portfolio.stockPool.find(s => s.symbol === symbol);\n  }\n  const response = await axios.post(`${API_URL}/create-stock`, {\n    name,\n    symbol,\n    sector\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","getMockPortfolio","mockBuyStock","mockSellStock","mockProgressDay","mockResetPortfolio","mockCreateStock","USE_MOCK_DATA","API_URL","getPortfolio","Promise","resolve","setTimeout","response","get","data","getStocks","stocks","getStockPool","stockPool","buyStock","symbol","quantity","result","price","type","date","Date","toISOString","post","sellStock","progressDay","resetPortfolio","savePortfolio","loadPortfolio","createStock","name","sector","portfolio","find","s"],"sources":["C:/Users/SAiNT/Desktop/2024/Projects/TraderGame - Java/tradergame/web-ui/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Stock, StockPortfolio, StockTransaction, NewStockRequest } from '../types';\r\nimport { \r\n  getMockPortfolio, \r\n  mockBuyStock, \r\n  mockSellStock, \r\n  mockProgressDay, \r\n  mockResetPortfolio,\r\n  mockCreateStock\r\n} from './mockData';\r\n\r\n// Flag to determine whether to use mock data or real API\r\nconst USE_MOCK_DATA = true;\r\n\r\nconst API_URL = '/api/portfolio';\r\n\r\nexport const getPortfolio = async (): Promise<StockPortfolio> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    return getMockPortfolio();\r\n  }\r\n  \r\n  const response = await axios.get<StockPortfolio>(API_URL);\r\n  return response.data;\r\n};\r\n\r\nexport const getStocks = async (): Promise<Stock[]> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    return getMockPortfolio().stocks;\r\n  }\r\n  \r\n  const response = await axios.get<Stock[]>(`${API_URL}/stocks`);\r\n  return response.data;\r\n};\r\n\r\nexport const getStockPool = async (): Promise<Stock[]> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    return getMockPortfolio().stockPool;\r\n  }\r\n  \r\n  const response = await axios.get<Stock[]>(`${API_URL}/pool`);\r\n  return response.data;\r\n};\r\n\r\nexport const buyStock = async (symbol: string, quantity: number): Promise<StockTransaction> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    const result = mockBuyStock(symbol, quantity);\r\n    return {\r\n      symbol,\r\n      quantity,\r\n      price: result.price,\r\n      type: 'BUY',\r\n      date: new Date().toISOString()\r\n    };\r\n  }\r\n  \r\n  const response = await axios.post<StockTransaction>(`${API_URL}/buy`, { symbol, quantity });\r\n  return response.data;\r\n};\r\n\r\nexport const sellStock = async (symbol: string, quantity: number): Promise<StockTransaction> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    const result = mockSellStock(symbol, quantity);\r\n    return {\r\n      symbol,\r\n      quantity,\r\n      price: result.price,\r\n      type: 'SELL',\r\n      date: new Date().toISOString()\r\n    };\r\n  }\r\n  \r\n  const response = await axios.post<StockTransaction>(`${API_URL}/sell`, { symbol, quantity });\r\n  return response.data;\r\n};\r\n\r\nexport const progressDay = async (): Promise<StockPortfolio> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    mockProgressDay();\r\n    return getMockPortfolio();\r\n  }\r\n  \r\n  const response = await axios.post<StockPortfolio>(`${API_URL}/progress-day`);\r\n  return response.data;\r\n};\r\n\r\nexport const resetPortfolio = async (): Promise<StockPortfolio> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    mockResetPortfolio();\r\n    return getMockPortfolio();\r\n  }\r\n  \r\n  const response = await axios.post<StockPortfolio>(`${API_URL}/reset`);\r\n  return response.data;\r\n};\r\n\r\nexport const savePortfolio = async (): Promise<void> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    // In mock mode, we don't need to do anything for save\r\n    return;\r\n  }\r\n  \r\n  await axios.post(`${API_URL}/save`);\r\n};\r\n\r\nexport const loadPortfolio = async (): Promise<StockPortfolio> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    // In mock mode, just return the current portfolio\r\n    return getMockPortfolio();\r\n  }\r\n  \r\n  const response = await axios.post<StockPortfolio>(`${API_URL}/load`);\r\n  return response.data;\r\n};\r\n\r\nexport const createStock = async (name: string, symbol: string, sector: string): Promise<Stock> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    mockCreateStock(name, symbol, sector);\r\n    const portfolio = getMockPortfolio();\r\n    return portfolio.stockPool.find(s => s.symbol === symbol) as Stock;\r\n  }\r\n  \r\n  const response = await axios.post<Stock>(`${API_URL}/create-stock`, { name, symbol, sector });\r\n  return response.data;\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SACEC,gBAAgB,EAChBC,YAAY,EACZC,aAAa,EACbC,eAAe,EACfC,kBAAkB,EAClBC,eAAe,QACV,YAAY;;AAEnB;AACA,MAAMC,aAAa,GAAG,IAAI;AAE1B,MAAMC,OAAO,GAAG,gBAAgB;AAEhC,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAqC;EAC/D,IAAIF,aAAa,EAAE;IACjB;IACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,OAAOV,gBAAgB,CAAC,CAAC;EAC3B;EAEA,MAAMY,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAiBN,OAAO,CAAC;EACzD,OAAOK,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAA8B;EACrD,IAAIT,aAAa,EAAE;IACjB;IACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,OAAOV,gBAAgB,CAAC,CAAC,CAACgB,MAAM;EAClC;EAEA,MAAMJ,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAU,GAAGN,OAAO,SAAS,CAAC;EAC9D,OAAOK,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAA8B;EACxD,IAAIX,aAAa,EAAE;IACjB;IACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,OAAOV,gBAAgB,CAAC,CAAC,CAACkB,SAAS;EACrC;EAEA,MAAMN,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAU,GAAGN,OAAO,OAAO,CAAC;EAC5D,OAAOK,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMK,QAAQ,GAAG,MAAAA,CAAOC,MAAc,EAAEC,QAAgB,KAAgC;EAC7F,IAAIf,aAAa,EAAE;IACjB;IACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,MAAMY,MAAM,GAAGrB,YAAY,CAACmB,MAAM,EAAEC,QAAQ,CAAC;IAC7C,OAAO;MACLD,MAAM;MACNC,QAAQ;MACRE,KAAK,EAAED,MAAM,CAACC,KAAK;MACnBC,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IAC/B,CAAC;EACH;EAEA,MAAMf,QAAQ,GAAG,MAAMb,KAAK,CAAC6B,IAAI,CAAmB,GAAGrB,OAAO,MAAM,EAAE;IAAEa,MAAM;IAAEC;EAAS,CAAC,CAAC;EAC3F,OAAOT,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMe,SAAS,GAAG,MAAAA,CAAOT,MAAc,EAAEC,QAAgB,KAAgC;EAC9F,IAAIf,aAAa,EAAE;IACjB;IACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,MAAMY,MAAM,GAAGpB,aAAa,CAACkB,MAAM,EAAEC,QAAQ,CAAC;IAC9C,OAAO;MACLD,MAAM;MACNC,QAAQ;MACRE,KAAK,EAAED,MAAM,CAACC,KAAK;MACnBC,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IAC/B,CAAC;EACH;EAEA,MAAMf,QAAQ,GAAG,MAAMb,KAAK,CAAC6B,IAAI,CAAmB,GAAGrB,OAAO,OAAO,EAAE;IAAEa,MAAM;IAAEC;EAAS,CAAC,CAAC;EAC5F,OAAOT,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMgB,WAAW,GAAG,MAAAA,CAAA,KAAqC;EAC9D,IAAIxB,aAAa,EAAE;IACjB;IACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtDP,eAAe,CAAC,CAAC;IACjB,OAAOH,gBAAgB,CAAC,CAAC;EAC3B;EAEA,MAAMY,QAAQ,GAAG,MAAMb,KAAK,CAAC6B,IAAI,CAAiB,GAAGrB,OAAO,eAAe,CAAC;EAC5E,OAAOK,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMiB,cAAc,GAAG,MAAAA,CAAA,KAAqC;EACjE,IAAIzB,aAAa,EAAE;IACjB;IACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtDN,kBAAkB,CAAC,CAAC;IACpB,OAAOJ,gBAAgB,CAAC,CAAC;EAC3B;EAEA,MAAMY,QAAQ,GAAG,MAAMb,KAAK,CAAC6B,IAAI,CAAiB,GAAGrB,OAAO,QAAQ,CAAC;EACrE,OAAOK,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMkB,aAAa,GAAG,MAAAA,CAAA,KAA2B;EACtD,IAAI1B,aAAa,EAAE;IACjB;IACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD;IACA;EACF;EAEA,MAAMX,KAAK,CAAC6B,IAAI,CAAC,GAAGrB,OAAO,OAAO,CAAC;AACrC,CAAC;AAED,OAAO,MAAM0B,aAAa,GAAG,MAAAA,CAAA,KAAqC;EAChE,IAAI3B,aAAa,EAAE;IACjB;IACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD;IACA,OAAOV,gBAAgB,CAAC,CAAC;EAC3B;EAEA,MAAMY,QAAQ,GAAG,MAAMb,KAAK,CAAC6B,IAAI,CAAiB,GAAGrB,OAAO,OAAO,CAAC;EACpE,OAAOK,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMoB,WAAW,GAAG,MAAAA,CAAOC,IAAY,EAAEf,MAAc,EAAEgB,MAAc,KAAqB;EACjG,IAAI9B,aAAa,EAAE;IACjB;IACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtDL,eAAe,CAAC8B,IAAI,EAAEf,MAAM,EAAEgB,MAAM,CAAC;IACrC,MAAMC,SAAS,GAAGrC,gBAAgB,CAAC,CAAC;IACpC,OAAOqC,SAAS,CAACnB,SAAS,CAACoB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACnB,MAAM,KAAKA,MAAM,CAAC;EAC3D;EAEA,MAAMR,QAAQ,GAAG,MAAMb,KAAK,CAAC6B,IAAI,CAAQ,GAAGrB,OAAO,eAAe,EAAE;IAAE4B,IAAI;IAAEf,MAAM;IAAEgB;EAAO,CAAC,CAAC;EAC7F,OAAOxB,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}