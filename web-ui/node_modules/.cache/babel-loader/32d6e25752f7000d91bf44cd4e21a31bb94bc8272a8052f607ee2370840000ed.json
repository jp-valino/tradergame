{"ast":null,"code":"import axios from 'axios';\nimport { getMockPortfolio, mockBuyStock, mockSellStock, mockProgressDay, mockResetPortfolio, mockCreateStock } from './mockData';\n\n// Flag to determine whether to use mock data or real API\nconst USE_MOCK_DATA = true;\nconst API_URL = '/api/portfolio';\nexport const getPortfolio = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return getMockPortfolio();\n  }\n  const response = await axios.get(API_URL);\n  return response.data;\n};\nexport const getStocks = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return getMockPortfolio().stocks;\n  }\n  const response = await axios.get(`${API_URL}/stocks`);\n  return response.data;\n};\nexport const getStockPool = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return getMockPortfolio().stockPool;\n  }\n  const response = await axios.get(`${API_URL}/pool`);\n  return response.data;\n};\nexport const buyStock = async transaction => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    mockBuyStock(transaction.symbol, transaction.quantity);\n    const portfolio = getMockPortfolio();\n    return portfolio.stocks.find(s => s.symbol === transaction.symbol);\n  }\n  const response = await axios.post(`${API_URL}/buy`, transaction);\n  return response.data;\n};\nexport const sellStock = async transaction => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    mockSellStock(transaction.symbol, transaction.quantity);\n    const portfolio = getMockPortfolio();\n    const stock = portfolio.stocks.find(s => s.symbol === transaction.symbol);\n    return stock || {\n      symbol: transaction.symbol,\n      quantity: 0,\n      name: '',\n      sector: '',\n      currentPrice: 0,\n      originalPrice: 0,\n      priceChange: 0,\n      buyPrice: 0,\n      sellPrice: 0,\n      realizedProfit: 0,\n      potentialProfit: 0,\n      dailyVariation: 0,\n      priceHistory: []\n    };\n  }\n  const response = await axios.post(`${API_URL}/sell`, transaction);\n  return response.data;\n};\nexport const progressDay = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    mockProgressDay();\n    return getMockPortfolio();\n  }\n  const response = await axios.post(`${API_URL}/progress-day`);\n  return response.data;\n};\nexport const resetPortfolio = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    mockResetPortfolio();\n    return getMockPortfolio();\n  }\n  const response = await axios.post(`${API_URL}/reset`);\n  return response.data;\n};\nexport const savePortfolio = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    // In mock mode, we don't need to do anything for save\n    return;\n  }\n  await axios.post(`${API_URL}/save`);\n};\nexport const loadPortfolio = async () => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    // In mock mode, we don't need to do anything for load\n    return;\n  }\n  await axios.post(`${API_URL}/load`);\n};\nexport const createStock = async newStock => {\n  if (USE_MOCK_DATA) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    mockCreateStock(newStock.name, newStock.symbol, newStock.sector);\n    const portfolio = getMockPortfolio();\n    return portfolio.stockPool.find(s => s.symbol === newStock.symbol);\n  }\n  const response = await axios.post(`${API_URL}/create-stock`, newStock);\n  return response.data;\n};","map":{"version":3,"names":["axios","getMockPortfolio","mockBuyStock","mockSellStock","mockProgressDay","mockResetPortfolio","mockCreateStock","USE_MOCK_DATA","API_URL","getPortfolio","Promise","resolve","setTimeout","response","get","data","getStocks","stocks","getStockPool","stockPool","buyStock","transaction","symbol","quantity","portfolio","find","s","post","sellStock","stock","name","sector","currentPrice","originalPrice","priceChange","buyPrice","sellPrice","realizedProfit","potentialProfit","dailyVariation","priceHistory","progressDay","resetPortfolio","savePortfolio","loadPortfolio","createStock","newStock"],"sources":["C:/Users/SAiNT/Desktop/2024/Projects/TraderGame - Java/tradergame/web-ui/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Stock, StockPortfolio, StockTransaction, NewStockRequest } from '../types';\r\nimport { \r\n  getMockPortfolio, \r\n  mockBuyStock, \r\n  mockSellStock, \r\n  mockProgressDay, \r\n  mockResetPortfolio,\r\n  mockCreateStock\r\n} from './mockData';\r\n\r\n// Flag to determine whether to use mock data or real API\r\nconst USE_MOCK_DATA = true;\r\n\r\nconst API_URL = '/api/portfolio';\r\n\r\nexport const getPortfolio = async (): Promise<StockPortfolio> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    return getMockPortfolio();\r\n  }\r\n  \r\n  const response = await axios.get<StockPortfolio>(API_URL);\r\n  return response.data;\r\n};\r\n\r\nexport const getStocks = async (): Promise<Stock[]> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    return getMockPortfolio().stocks;\r\n  }\r\n  \r\n  const response = await axios.get<Stock[]>(`${API_URL}/stocks`);\r\n  return response.data;\r\n};\r\n\r\nexport const getStockPool = async (): Promise<Stock[]> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    return getMockPortfolio().stockPool;\r\n  }\r\n  \r\n  const response = await axios.get<Stock[]>(`${API_URL}/pool`);\r\n  return response.data;\r\n};\r\n\r\nexport const buyStock = async (transaction: StockTransaction): Promise<Stock> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    mockBuyStock(transaction.symbol, transaction.quantity);\r\n    const portfolio = getMockPortfolio();\r\n    return portfolio.stocks.find(s => s.symbol === transaction.symbol) as Stock;\r\n  }\r\n  \r\n  const response = await axios.post<Stock>(`${API_URL}/buy`, transaction);\r\n  return response.data;\r\n};\r\n\r\nexport const sellStock = async (transaction: StockTransaction): Promise<Stock> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    mockSellStock(transaction.symbol, transaction.quantity);\r\n    const portfolio = getMockPortfolio();\r\n    const stock = portfolio.stocks.find(s => s.symbol === transaction.symbol);\r\n    return stock || { \r\n      symbol: transaction.symbol, \r\n      quantity: 0,\r\n      name: '',\r\n      sector: '',\r\n      currentPrice: 0,\r\n      originalPrice: 0,\r\n      priceChange: 0,\r\n      buyPrice: 0,\r\n      sellPrice: 0,\r\n      realizedProfit: 0,\r\n      potentialProfit: 0,\r\n      dailyVariation: 0,\r\n      priceHistory: []\r\n    };\r\n  }\r\n  \r\n  const response = await axios.post<Stock>(`${API_URL}/sell`, transaction);\r\n  return response.data;\r\n};\r\n\r\nexport const progressDay = async (): Promise<StockPortfolio> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    mockProgressDay();\r\n    return getMockPortfolio();\r\n  }\r\n  \r\n  const response = await axios.post<StockPortfolio>(`${API_URL}/progress-day`);\r\n  return response.data;\r\n};\r\n\r\nexport const resetPortfolio = async (): Promise<StockPortfolio> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    mockResetPortfolio();\r\n    return getMockPortfolio();\r\n  }\r\n  \r\n  const response = await axios.post<StockPortfolio>(`${API_URL}/reset`);\r\n  return response.data;\r\n};\r\n\r\nexport const savePortfolio = async (): Promise<void> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    // In mock mode, we don't need to do anything for save\r\n    return;\r\n  }\r\n  \r\n  await axios.post(`${API_URL}/save`);\r\n};\r\n\r\nexport const loadPortfolio = async (): Promise<void> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    // In mock mode, we don't need to do anything for load\r\n    return;\r\n  }\r\n  \r\n  await axios.post(`${API_URL}/load`);\r\n};\r\n\r\nexport const createStock = async (newStock: NewStockRequest): Promise<Stock> => {\r\n  if (USE_MOCK_DATA) {\r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    mockCreateStock(newStock.name, newStock.symbol, newStock.sector);\r\n    const portfolio = getMockPortfolio();\r\n    return portfolio.stockPool.find(s => s.symbol === newStock.symbol) as Stock;\r\n  }\r\n  \r\n  const response = await axios.post<Stock>(`${API_URL}/create-stock`, newStock);\r\n  return response.data;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}