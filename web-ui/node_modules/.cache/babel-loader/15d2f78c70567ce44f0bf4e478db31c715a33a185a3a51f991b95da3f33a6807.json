{"ast":null,"code":"// Generate random price history\nconst generatePriceHistory = (days, startPrice) => {\n  const history = [startPrice];\n  let currentPrice = startPrice;\n  for (let i = 1; i < days; i++) {\n    const change = currentPrice * (Math.random() * 0.1 - 0.05); // -5% to +5%\n    currentPrice += change;\n    history.push(Math.max(1, currentPrice)); // Ensure price doesn't go below 1\n  }\n  return history;\n};\n\n// Generate a mock stock\nconst createMockStock = (symbol, name, sector, price, quantity = 0) => {\n  const priceHistory = generatePriceHistory(10, price);\n  const currentPrice = priceHistory[priceHistory.length - 1];\n  const previousPrice = priceHistory[priceHistory.length - 2] || price;\n  const priceChange = currentPrice - previousPrice;\n  return {\n    symbol,\n    name,\n    sector,\n    currentPrice,\n    originalPrice: price,\n    priceChange,\n    quantity,\n    buyPrice: quantity > 0 ? price * 0.9 : 0,\n    // Simulate buying at a slightly lower price\n    sellPrice: 0,\n    realizedProfit: 0,\n    potentialProfit: quantity > 0 ? quantity * (currentPrice - price * 0.9) : 0,\n    dailyVariation: priceChange / previousPrice * 100,\n    priceHistory\n  };\n};\n\n// Create mock stock pool\nconst createMockStockPool = () => {\n  return [createMockStock('AAPL', 'Apple Inc.', 'Technology', 150), createMockStock('MSFT', 'Microsoft Corporation', 'Technology', 250), createMockStock('GOOGL', 'Alphabet Inc.', 'Technology', 2000), createMockStock('AMZN', 'Amazon.com Inc.', 'Consumer Cyclical', 3000), createMockStock('TSLA', 'Tesla Inc.', 'Automotive', 800), createMockStock('META', 'Meta Platforms Inc.', 'Technology', 300), createMockStock('NFLX', 'Netflix Inc.', 'Entertainment', 400), createMockStock('JPM', 'JPMorgan Chase & Co.', 'Financial Services', 120), createMockStock('V', 'Visa Inc.', 'Financial Services', 200), createMockStock('JNJ', 'Johnson & Johnson', 'Healthcare', 160)];\n};\n\n// Create mock portfolio with some owned stocks\nconst createMockPortfolio = () => {\n  const stockPool = createMockStockPool();\n\n  // Create some owned stocks (copies of pool stocks with quantities)\n  const ownedStocks = [createMockStock('AAPL', 'Apple Inc.', 'Technology', 150, 10), createMockStock('MSFT', 'Microsoft Corporation', 'Technology', 250, 5), createMockStock('GOOGL', 'Alphabet Inc.', 'Technology', 2000, 2)];\n\n  // Calculate portfolio value\n  const portfolioValue = ownedStocks.reduce((total, stock) => total + stock.currentPrice * stock.quantity, 0);\n\n  // Generate PnL history\n  const pnlHistory = generatePriceHistory(10, 10000).map(val => val - 10000);\n  return {\n    name: 'My Stock Portfolio',\n    tradingDay: 10,\n    cash: 50000,\n    balance: 50000,\n    portfolioValue,\n    totalPnl: pnlHistory[pnlHistory.length - 1],\n    marketState: Math.random() > 0.5 ? 'BULL' : 'BEAR',\n    stocks: ownedStocks,\n    stockPool,\n    pnlHistory,\n    ownedStocks: [...ownedStocks],\n    transactions: []\n  };\n};\n\n// Mock portfolio data\nlet mockPortfolio = createMockPortfolio();\n\n// Add ownedStocks and transactions to match the updated StockPortfolio interface\nmockPortfolio.ownedStocks = [...mockPortfolio.stocks];\nmockPortfolio.transactions = [];\n\n// Mock API functions\nexport const getMockPortfolio = () => {\n  return mockPortfolio;\n};\nexport const mockBuyStock = (symbol, quantity) => {\n  const stockToBuy = mockPortfolio.stockPool.find(s => s.symbol === symbol);\n  if (!stockToBuy) return {\n    price: 0\n  };\n  const price = stockToBuy.currentPrice;\n  const cost = price * quantity;\n\n  // Check if we have enough cash\n  if (mockPortfolio.cash < cost) return {\n    price: 0\n  };\n\n  // Update cash\n  mockPortfolio.cash -= cost;\n  mockPortfolio.balance = mockPortfolio.cash;\n\n  // Check if we already own this stock\n  const existingStock = mockPortfolio.stocks.find(s => s.symbol === symbol);\n  if (existingStock) {\n    // Update existing stock\n    const avgBuyPrice = (existingStock.buyPrice * existingStock.quantity + cost) / (existingStock.quantity + quantity);\n    existingStock.quantity += quantity;\n    existingStock.buyPrice = avgBuyPrice;\n    existingStock.potentialProfit = existingStock.quantity * (existingStock.currentPrice - existingStock.buyPrice);\n  } else {\n    // Add new stock to portfolio\n    const newStock = {\n      ...stockToBuy\n    };\n    newStock.quantity = quantity;\n    newStock.buyPrice = newStock.currentPrice;\n    newStock.potentialProfit = quantity * (newStock.currentPrice - newStock.buyPrice);\n    mockPortfolio.stocks.push(newStock);\n  }\n\n  // Update ownedStocks to match stocks\n  mockPortfolio.ownedStocks = [...mockPortfolio.stocks];\n\n  // Create transaction record\n  const transaction = {\n    symbol,\n    quantity,\n    price,\n    type: 'BUY',\n    date: new Date().toISOString()\n  };\n\n  // Add to transactions\n  mockPortfolio.transactions.push(transaction);\n\n  // Update portfolio value\n  mockPortfolio.portfolioValue = mockPortfolio.stocks.reduce((total, stock) => total + stock.currentPrice * stock.quantity, 0);\n  return {\n    price\n  };\n};\nexport const mockSellStock = (symbol, quantity) => {\n  const stockToSell = mockPortfolio.stocks.find(s => s.symbol === symbol);\n  if (!stockToSell || stockToSell.quantity < quantity) return {\n    price: 0\n  };\n  const price = stockToSell.currentPrice;\n  const revenue = price * quantity;\n\n  // Update cash\n  mockPortfolio.cash += revenue;\n  mockPortfolio.balance = mockPortfolio.cash;\n\n  // Update realized profit\n  const profitPerShare = stockToSell.currentPrice - stockToSell.buyPrice;\n  stockToSell.realizedProfit += profitPerShare * quantity;\n\n  // Update stock quantity\n  stockToSell.quantity -= quantity;\n\n  // Remove stock if quantity is 0\n  if (stockToSell.quantity === 0) {\n    mockPortfolio.stocks = mockPortfolio.stocks.filter(s => s.symbol !== symbol);\n  } else {\n    // Update potential profit\n    stockToSell.potentialProfit = stockToSell.quantity * (stockToSell.currentPrice - stockToSell.buyPrice);\n  }\n\n  // Update ownedStocks to match stocks\n  mockPortfolio.ownedStocks = [...mockPortfolio.stocks];\n\n  // Create transaction record\n  const transaction = {\n    symbol,\n    quantity,\n    price,\n    type: 'SELL',\n    date: new Date().toISOString()\n  };\n\n  // Add to transactions\n  mockPortfolio.transactions.push(transaction);\n\n  // Update portfolio value\n  mockPortfolio.portfolioValue = mockPortfolio.stocks.reduce((total, stock) => total + stock.currentPrice * stock.quantity, 0);\n\n  // Update total PnL\n  mockPortfolio.totalPnl = mockPortfolio.stocks.reduce((total, stock) => total + stock.potentialProfit + stock.realizedProfit, 0);\n  return {\n    price\n  };\n};\nexport const mockProgressDay = () => {\n  // Increment trading day\n  mockPortfolio.tradingDay += 1;\n\n  // Randomly change market state\n  if (Math.random() < 0.2) {\n    mockPortfolio.marketState = Math.random() > 0.5 ? 'BULL' : 'BEAR';\n  }\n\n  // Update stock prices\n  const updateStockPrice = stock => {\n    const marketFactor = mockPortfolio.marketState === 'BULL' ? 0.03 : -0.02;\n    const randomFactor = Math.random() * 0.1 - 0.05; // -5% to +5%\n    const changePercent = marketFactor + randomFactor;\n    const previousPrice = stock.currentPrice;\n    const newPrice = Math.max(1, previousPrice * (1 + changePercent));\n    stock.priceHistory.push(newPrice);\n    if (stock.priceHistory.length > 30) {\n      stock.priceHistory.shift(); // Keep only last 30 days\n    }\n    stock.currentPrice = newPrice;\n    stock.priceChange = newPrice - previousPrice;\n    stock.dailyVariation = stock.priceChange / previousPrice * 100;\n    if (stock.quantity > 0) {\n      stock.potentialProfit = stock.quantity * (stock.currentPrice - stock.buyPrice);\n    }\n    return stock;\n  };\n\n  // Update all stocks\n  mockPortfolio.stocks = mockPortfolio.stocks.map(updateStockPrice);\n  mockPortfolio.stockPool = mockPortfolio.stockPool.map(updateStockPrice);\n\n  // Update ownedStocks to match stocks\n  mockPortfolio.ownedStocks = [...mockPortfolio.stocks];\n\n  // Update portfolio value\n  mockPortfolio.portfolioValue = mockPortfolio.stocks.reduce((total, stock) => total + stock.currentPrice * stock.quantity, 0);\n\n  // Update PnL history\n  const currentPnl = mockPortfolio.stocks.reduce((total, stock) => total + stock.potentialProfit + stock.realizedProfit, 0);\n  mockPortfolio.pnlHistory.push(currentPnl);\n  if (mockPortfolio.pnlHistory.length > 30) {\n    mockPortfolio.pnlHistory.shift(); // Keep only last 30 days\n  }\n  mockPortfolio.totalPnl = currentPnl;\n};\nexport const mockResetPortfolio = () => {\n  mockPortfolio = createMockPortfolio();\n  // Add ownedStocks and transactions to match the updated StockPortfolio interface\n  mockPortfolio.ownedStocks = [...mockPortfolio.stocks];\n  mockPortfolio.transactions = [];\n};\nexport const mockCreateStock = (name, symbol, sector) => {\n  const price = Math.floor(Math.random() * 500) + 50; // Random price between 50 and 550\n  const newStock = createMockStock(symbol, name, sector, price);\n  mockPortfolio.stockPool.push(newStock);\n};","map":{"version":3,"names":["generatePriceHistory","days","startPrice","history","currentPrice","i","change","Math","random","push","max","createMockStock","symbol","name","sector","price","quantity","priceHistory","length","previousPrice","priceChange","originalPrice","buyPrice","sellPrice","realizedProfit","potentialProfit","dailyVariation","createMockStockPool","createMockPortfolio","stockPool","ownedStocks","portfolioValue","reduce","total","stock","pnlHistory","map","val","tradingDay","cash","balance","totalPnl","marketState","stocks","transactions","mockPortfolio","getMockPortfolio","mockBuyStock","stockToBuy","find","s","cost","existingStock","avgBuyPrice","newStock","transaction","type","date","Date","toISOString","mockSellStock","stockToSell","revenue","profitPerShare","filter","mockProgressDay","updateStockPrice","marketFactor","randomFactor","changePercent","newPrice","shift","currentPnl","mockResetPortfolio","mockCreateStock","floor"],"sources":["C:/Users/SAiNT/Desktop/2024/Projects/TraderGame - Java/tradergame/web-ui/src/services/mockData.ts"],"sourcesContent":["import { Stock, StockPortfolio, StockTransaction } from '../types';\r\n\r\n// Generate random price history\r\nconst generatePriceHistory = (days: number, startPrice: number): number[] => {\r\n  const history = [startPrice];\r\n  let currentPrice = startPrice;\r\n  \r\n  for (let i = 1; i < days; i++) {\r\n    const change = currentPrice * (Math.random() * 0.1 - 0.05); // -5% to +5%\r\n    currentPrice += change;\r\n    history.push(Math.max(1, currentPrice)); // Ensure price doesn't go below 1\r\n  }\r\n  \r\n  return history;\r\n};\r\n\r\n// Generate a mock stock\r\nconst createMockStock = (\r\n  symbol: string, \r\n  name: string, \r\n  sector: string, \r\n  price: number, \r\n  quantity: number = 0\r\n): Stock => {\r\n  const priceHistory = generatePriceHistory(10, price);\r\n  const currentPrice = priceHistory[priceHistory.length - 1];\r\n  const previousPrice = priceHistory[priceHistory.length - 2] || price;\r\n  const priceChange = currentPrice - previousPrice;\r\n  \r\n  return {\r\n    symbol,\r\n    name,\r\n    sector,\r\n    currentPrice,\r\n    originalPrice: price,\r\n    priceChange,\r\n    quantity,\r\n    buyPrice: quantity > 0 ? price * 0.9 : 0, // Simulate buying at a slightly lower price\r\n    sellPrice: 0,\r\n    realizedProfit: 0,\r\n    potentialProfit: quantity > 0 ? quantity * (currentPrice - (price * 0.9)) : 0,\r\n    dailyVariation: (priceChange / previousPrice) * 100,\r\n    priceHistory\r\n  };\r\n};\r\n\r\n// Create mock stock pool\r\nconst createMockStockPool = (): Stock[] => {\r\n  return [\r\n    createMockStock('AAPL', 'Apple Inc.', 'Technology', 150),\r\n    createMockStock('MSFT', 'Microsoft Corporation', 'Technology', 250),\r\n    createMockStock('GOOGL', 'Alphabet Inc.', 'Technology', 2000),\r\n    createMockStock('AMZN', 'Amazon.com Inc.', 'Consumer Cyclical', 3000),\r\n    createMockStock('TSLA', 'Tesla Inc.', 'Automotive', 800),\r\n    createMockStock('META', 'Meta Platforms Inc.', 'Technology', 300),\r\n    createMockStock('NFLX', 'Netflix Inc.', 'Entertainment', 400),\r\n    createMockStock('JPM', 'JPMorgan Chase & Co.', 'Financial Services', 120),\r\n    createMockStock('V', 'Visa Inc.', 'Financial Services', 200),\r\n    createMockStock('JNJ', 'Johnson & Johnson', 'Healthcare', 160)\r\n  ];\r\n};\r\n\r\n// Create mock portfolio with some owned stocks\r\nconst createMockPortfolio = (): StockPortfolio => {\r\n  const stockPool = createMockStockPool();\r\n  \r\n  // Create some owned stocks (copies of pool stocks with quantities)\r\n  const ownedStocks = [\r\n    createMockStock('AAPL', 'Apple Inc.', 'Technology', 150, 10),\r\n    createMockStock('MSFT', 'Microsoft Corporation', 'Technology', 250, 5),\r\n    createMockStock('GOOGL', 'Alphabet Inc.', 'Technology', 2000, 2)\r\n  ];\r\n  \r\n  // Calculate portfolio value\r\n  const portfolioValue = ownedStocks.reduce(\r\n    (total, stock) => total + stock.currentPrice * stock.quantity, \r\n    0\r\n  );\r\n  \r\n  // Generate PnL history\r\n  const pnlHistory = generatePriceHistory(10, 10000).map(val => val - 10000);\r\n  \r\n  return {\r\n    name: 'My Stock Portfolio',\r\n    tradingDay: 10,\r\n    cash: 50000,\r\n    balance: 50000,\r\n    portfolioValue,\r\n    totalPnl: pnlHistory[pnlHistory.length - 1],\r\n    marketState: Math.random() > 0.5 ? 'BULL' : 'BEAR',\r\n    stocks: ownedStocks,\r\n    stockPool,\r\n    pnlHistory,\r\n    ownedStocks: [...ownedStocks],\r\n    transactions: []\r\n  };\r\n};\r\n\r\n// Mock portfolio data\r\nlet mockPortfolio = createMockPortfolio();\r\n\r\n// Add ownedStocks and transactions to match the updated StockPortfolio interface\r\nmockPortfolio.ownedStocks = [...mockPortfolio.stocks];\r\nmockPortfolio.transactions = [];\r\n\r\n// Mock API functions\r\nexport const getMockPortfolio = (): StockPortfolio => {\r\n  return mockPortfolio;\r\n};\r\n\r\nexport const mockBuyStock = (symbol: string, quantity: number): { price: number } => {\r\n  const stockToBuy = mockPortfolio.stockPool.find(s => s.symbol === symbol);\r\n  if (!stockToBuy) return { price: 0 };\r\n  \r\n  const price = stockToBuy.currentPrice;\r\n  const cost = price * quantity;\r\n  \r\n  // Check if we have enough cash\r\n  if (mockPortfolio.cash < cost) return { price: 0 };\r\n  \r\n  // Update cash\r\n  mockPortfolio.cash -= cost;\r\n  mockPortfolio.balance = mockPortfolio.cash;\r\n  \r\n  // Check if we already own this stock\r\n  const existingStock = mockPortfolio.stocks.find(s => s.symbol === symbol);\r\n  \r\n  if (existingStock) {\r\n    // Update existing stock\r\n    const avgBuyPrice = (existingStock.buyPrice * existingStock.quantity + cost) / (existingStock.quantity + quantity);\r\n    existingStock.quantity += quantity;\r\n    existingStock.buyPrice = avgBuyPrice;\r\n    existingStock.potentialProfit = existingStock.quantity * (existingStock.currentPrice - existingStock.buyPrice);\r\n  } else {\r\n    // Add new stock to portfolio\r\n    const newStock = { ...stockToBuy };\r\n    newStock.quantity = quantity;\r\n    newStock.buyPrice = newStock.currentPrice;\r\n    newStock.potentialProfit = quantity * (newStock.currentPrice - newStock.buyPrice);\r\n    mockPortfolio.stocks.push(newStock);\r\n  }\r\n  \r\n  // Update ownedStocks to match stocks\r\n  mockPortfolio.ownedStocks = [...mockPortfolio.stocks];\r\n  \r\n  // Create transaction record\r\n  const transaction: StockTransaction = {\r\n    symbol,\r\n    quantity,\r\n    price,\r\n    type: 'BUY',\r\n    date: new Date().toISOString()\r\n  };\r\n  \r\n  // Add to transactions\r\n  mockPortfolio.transactions.push(transaction);\r\n  \r\n  // Update portfolio value\r\n  mockPortfolio.portfolioValue = mockPortfolio.stocks.reduce(\r\n    (total, stock) => total + stock.currentPrice * stock.quantity, \r\n    0\r\n  );\r\n  \r\n  return { price };\r\n};\r\n\r\nexport const mockSellStock = (symbol: string, quantity: number): { price: number } => {\r\n  const stockToSell = mockPortfolio.stocks.find(s => s.symbol === symbol);\r\n  if (!stockToSell || stockToSell.quantity < quantity) return { price: 0 };\r\n  \r\n  const price = stockToSell.currentPrice;\r\n  const revenue = price * quantity;\r\n  \r\n  // Update cash\r\n  mockPortfolio.cash += revenue;\r\n  mockPortfolio.balance = mockPortfolio.cash;\r\n  \r\n  // Update realized profit\r\n  const profitPerShare = stockToSell.currentPrice - stockToSell.buyPrice;\r\n  stockToSell.realizedProfit += profitPerShare * quantity;\r\n  \r\n  // Update stock quantity\r\n  stockToSell.quantity -= quantity;\r\n  \r\n  // Remove stock if quantity is 0\r\n  if (stockToSell.quantity === 0) {\r\n    mockPortfolio.stocks = mockPortfolio.stocks.filter(s => s.symbol !== symbol);\r\n  } else {\r\n    // Update potential profit\r\n    stockToSell.potentialProfit = stockToSell.quantity * (stockToSell.currentPrice - stockToSell.buyPrice);\r\n  }\r\n  \r\n  // Update ownedStocks to match stocks\r\n  mockPortfolio.ownedStocks = [...mockPortfolio.stocks];\r\n  \r\n  // Create transaction record\r\n  const transaction: StockTransaction = {\r\n    symbol,\r\n    quantity,\r\n    price,\r\n    type: 'SELL',\r\n    date: new Date().toISOString()\r\n  };\r\n  \r\n  // Add to transactions\r\n  mockPortfolio.transactions.push(transaction);\r\n  \r\n  // Update portfolio value\r\n  mockPortfolio.portfolioValue = mockPortfolio.stocks.reduce(\r\n    (total, stock) => total + stock.currentPrice * stock.quantity, \r\n    0\r\n  );\r\n  \r\n  // Update total PnL\r\n  mockPortfolio.totalPnl = mockPortfolio.stocks.reduce(\r\n    (total, stock) => total + stock.potentialProfit + stock.realizedProfit,\r\n    0\r\n  );\r\n  \r\n  return { price };\r\n};\r\n\r\nexport const mockProgressDay = (): void => {\r\n  // Increment trading day\r\n  mockPortfolio.tradingDay += 1;\r\n  \r\n  // Randomly change market state\r\n  if (Math.random() < 0.2) {\r\n    mockPortfolio.marketState = Math.random() > 0.5 ? 'BULL' : 'BEAR';\r\n  }\r\n  \r\n  // Update stock prices\r\n  const updateStockPrice = (stock: Stock) => {\r\n    const marketFactor = mockPortfolio.marketState === 'BULL' ? 0.03 : -0.02;\r\n    const randomFactor = Math.random() * 0.1 - 0.05; // -5% to +5%\r\n    const changePercent = marketFactor + randomFactor;\r\n    \r\n    const previousPrice = stock.currentPrice;\r\n    const newPrice = Math.max(1, previousPrice * (1 + changePercent));\r\n    \r\n    stock.priceHistory.push(newPrice);\r\n    if (stock.priceHistory.length > 30) {\r\n      stock.priceHistory.shift(); // Keep only last 30 days\r\n    }\r\n    \r\n    stock.currentPrice = newPrice;\r\n    stock.priceChange = newPrice - previousPrice;\r\n    stock.dailyVariation = (stock.priceChange / previousPrice) * 100;\r\n    \r\n    if (stock.quantity > 0) {\r\n      stock.potentialProfit = stock.quantity * (stock.currentPrice - stock.buyPrice);\r\n    }\r\n    \r\n    return stock;\r\n  };\r\n  \r\n  // Update all stocks\r\n  mockPortfolio.stocks = mockPortfolio.stocks.map(updateStockPrice);\r\n  mockPortfolio.stockPool = mockPortfolio.stockPool.map(updateStockPrice);\r\n  \r\n  // Update ownedStocks to match stocks\r\n  mockPortfolio.ownedStocks = [...mockPortfolio.stocks];\r\n  \r\n  // Update portfolio value\r\n  mockPortfolio.portfolioValue = mockPortfolio.stocks.reduce(\r\n    (total, stock) => total + stock.currentPrice * stock.quantity, \r\n    0\r\n  );\r\n  \r\n  // Update PnL history\r\n  const currentPnl = mockPortfolio.stocks.reduce(\r\n    (total, stock) => total + stock.potentialProfit + stock.realizedProfit,\r\n    0\r\n  );\r\n  mockPortfolio.pnlHistory.push(currentPnl);\r\n  if (mockPortfolio.pnlHistory.length > 30) {\r\n    mockPortfolio.pnlHistory.shift(); // Keep only last 30 days\r\n  }\r\n  \r\n  mockPortfolio.totalPnl = currentPnl;\r\n};\r\n\r\nexport const mockResetPortfolio = (): void => {\r\n  mockPortfolio = createMockPortfolio();\r\n  // Add ownedStocks and transactions to match the updated StockPortfolio interface\r\n  mockPortfolio.ownedStocks = [...mockPortfolio.stocks];\r\n  mockPortfolio.transactions = [];\r\n};\r\n\r\nexport const mockCreateStock = (name: string, symbol: string, sector: string): void => {\r\n  const price = Math.floor(Math.random() * 500) + 50; // Random price between 50 and 550\r\n  const newStock = createMockStock(symbol, name, sector, price);\r\n  mockPortfolio.stockPool.push(newStock);\r\n}; "],"mappings":"AAEA;AACA,MAAMA,oBAAoB,GAAGA,CAACC,IAAY,EAAEC,UAAkB,KAAe;EAC3E,MAAMC,OAAO,GAAG,CAACD,UAAU,CAAC;EAC5B,IAAIE,YAAY,GAAGF,UAAU;EAE7B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;IAC7B,MAAMC,MAAM,GAAGF,YAAY,IAAIG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;IAC5DJ,YAAY,IAAIE,MAAM;IACtBH,OAAO,CAACM,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,CAAC,EAAEN,YAAY,CAAC,CAAC,CAAC,CAAC;EAC3C;EAEA,OAAOD,OAAO;AAChB,CAAC;;AAED;AACA,MAAMQ,eAAe,GAAGA,CACtBC,MAAc,EACdC,IAAY,EACZC,MAAc,EACdC,KAAa,EACbC,QAAgB,GAAG,CAAC,KACV;EACV,MAAMC,YAAY,GAAGjB,oBAAoB,CAAC,EAAE,EAAEe,KAAK,CAAC;EACpD,MAAMX,YAAY,GAAGa,YAAY,CAACA,YAAY,CAACC,MAAM,GAAG,CAAC,CAAC;EAC1D,MAAMC,aAAa,GAAGF,YAAY,CAACA,YAAY,CAACC,MAAM,GAAG,CAAC,CAAC,IAAIH,KAAK;EACpE,MAAMK,WAAW,GAAGhB,YAAY,GAAGe,aAAa;EAEhD,OAAO;IACLP,MAAM;IACNC,IAAI;IACJC,MAAM;IACNV,YAAY;IACZiB,aAAa,EAAEN,KAAK;IACpBK,WAAW;IACXJ,QAAQ;IACRM,QAAQ,EAAEN,QAAQ,GAAG,CAAC,GAAGD,KAAK,GAAG,GAAG,GAAG,CAAC;IAAE;IAC1CQ,SAAS,EAAE,CAAC;IACZC,cAAc,EAAE,CAAC;IACjBC,eAAe,EAAET,QAAQ,GAAG,CAAC,GAAGA,QAAQ,IAAIZ,YAAY,GAAIW,KAAK,GAAG,GAAI,CAAC,GAAG,CAAC;IAC7EW,cAAc,EAAGN,WAAW,GAAGD,aAAa,GAAI,GAAG;IACnDF;EACF,CAAC;AACH,CAAC;;AAED;AACA,MAAMU,mBAAmB,GAAGA,CAAA,KAAe;EACzC,OAAO,CACLhB,eAAe,CAAC,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,CAAC,EACxDA,eAAe,CAAC,MAAM,EAAE,uBAAuB,EAAE,YAAY,EAAE,GAAG,CAAC,EACnEA,eAAe,CAAC,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,IAAI,CAAC,EAC7DA,eAAe,CAAC,MAAM,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,IAAI,CAAC,EACrEA,eAAe,CAAC,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,CAAC,EACxDA,eAAe,CAAC,MAAM,EAAE,qBAAqB,EAAE,YAAY,EAAE,GAAG,CAAC,EACjEA,eAAe,CAAC,MAAM,EAAE,cAAc,EAAE,eAAe,EAAE,GAAG,CAAC,EAC7DA,eAAe,CAAC,KAAK,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,GAAG,CAAC,EACzEA,eAAe,CAAC,GAAG,EAAE,WAAW,EAAE,oBAAoB,EAAE,GAAG,CAAC,EAC5DA,eAAe,CAAC,KAAK,EAAE,mBAAmB,EAAE,YAAY,EAAE,GAAG,CAAC,CAC/D;AACH,CAAC;;AAED;AACA,MAAMiB,mBAAmB,GAAGA,CAAA,KAAsB;EAChD,MAAMC,SAAS,GAAGF,mBAAmB,CAAC,CAAC;;EAEvC;EACA,MAAMG,WAAW,GAAG,CAClBnB,eAAe,CAAC,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,EAAE,EAAE,CAAC,EAC5DA,eAAe,CAAC,MAAM,EAAE,uBAAuB,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC,EACtEA,eAAe,CAAC,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CACjE;;EAED;EACA,MAAMoB,cAAc,GAAGD,WAAW,CAACE,MAAM,CACvC,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,GAAGC,KAAK,CAAC9B,YAAY,GAAG8B,KAAK,CAAClB,QAAQ,EAC7D,CACF,CAAC;;EAED;EACA,MAAMmB,UAAU,GAAGnC,oBAAoB,CAAC,EAAE,EAAE,KAAK,CAAC,CAACoC,GAAG,CAACC,GAAG,IAAIA,GAAG,GAAG,KAAK,CAAC;EAE1E,OAAO;IACLxB,IAAI,EAAE,oBAAoB;IAC1ByB,UAAU,EAAE,EAAE;IACdC,IAAI,EAAE,KAAK;IACXC,OAAO,EAAE,KAAK;IACdT,cAAc;IACdU,QAAQ,EAAEN,UAAU,CAACA,UAAU,CAACjB,MAAM,GAAG,CAAC,CAAC;IAC3CwB,WAAW,EAAEnC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,GAAG,MAAM;IAClDmC,MAAM,EAAEb,WAAW;IACnBD,SAAS;IACTM,UAAU;IACVL,WAAW,EAAE,CAAC,GAAGA,WAAW,CAAC;IAC7Bc,YAAY,EAAE;EAChB,CAAC;AACH,CAAC;;AAED;AACA,IAAIC,aAAa,GAAGjB,mBAAmB,CAAC,CAAC;;AAEzC;AACAiB,aAAa,CAACf,WAAW,GAAG,CAAC,GAAGe,aAAa,CAACF,MAAM,CAAC;AACrDE,aAAa,CAACD,YAAY,GAAG,EAAE;;AAE/B;AACA,OAAO,MAAME,gBAAgB,GAAGA,CAAA,KAAsB;EACpD,OAAOD,aAAa;AACtB,CAAC;AAED,OAAO,MAAME,YAAY,GAAGA,CAACnC,MAAc,EAAEI,QAAgB,KAAwB;EACnF,MAAMgC,UAAU,GAAGH,aAAa,CAAChB,SAAS,CAACoB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtC,MAAM,KAAKA,MAAM,CAAC;EACzE,IAAI,CAACoC,UAAU,EAAE,OAAO;IAAEjC,KAAK,EAAE;EAAE,CAAC;EAEpC,MAAMA,KAAK,GAAGiC,UAAU,CAAC5C,YAAY;EACrC,MAAM+C,IAAI,GAAGpC,KAAK,GAAGC,QAAQ;;EAE7B;EACA,IAAI6B,aAAa,CAACN,IAAI,GAAGY,IAAI,EAAE,OAAO;IAAEpC,KAAK,EAAE;EAAE,CAAC;;EAElD;EACA8B,aAAa,CAACN,IAAI,IAAIY,IAAI;EAC1BN,aAAa,CAACL,OAAO,GAAGK,aAAa,CAACN,IAAI;;EAE1C;EACA,MAAMa,aAAa,GAAGP,aAAa,CAACF,MAAM,CAACM,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtC,MAAM,KAAKA,MAAM,CAAC;EAEzE,IAAIwC,aAAa,EAAE;IACjB;IACA,MAAMC,WAAW,GAAG,CAACD,aAAa,CAAC9B,QAAQ,GAAG8B,aAAa,CAACpC,QAAQ,GAAGmC,IAAI,KAAKC,aAAa,CAACpC,QAAQ,GAAGA,QAAQ,CAAC;IAClHoC,aAAa,CAACpC,QAAQ,IAAIA,QAAQ;IAClCoC,aAAa,CAAC9B,QAAQ,GAAG+B,WAAW;IACpCD,aAAa,CAAC3B,eAAe,GAAG2B,aAAa,CAACpC,QAAQ,IAAIoC,aAAa,CAAChD,YAAY,GAAGgD,aAAa,CAAC9B,QAAQ,CAAC;EAChH,CAAC,MAAM;IACL;IACA,MAAMgC,QAAQ,GAAG;MAAE,GAAGN;IAAW,CAAC;IAClCM,QAAQ,CAACtC,QAAQ,GAAGA,QAAQ;IAC5BsC,QAAQ,CAAChC,QAAQ,GAAGgC,QAAQ,CAAClD,YAAY;IACzCkD,QAAQ,CAAC7B,eAAe,GAAGT,QAAQ,IAAIsC,QAAQ,CAAClD,YAAY,GAAGkD,QAAQ,CAAChC,QAAQ,CAAC;IACjFuB,aAAa,CAACF,MAAM,CAAClC,IAAI,CAAC6C,QAAQ,CAAC;EACrC;;EAEA;EACAT,aAAa,CAACf,WAAW,GAAG,CAAC,GAAGe,aAAa,CAACF,MAAM,CAAC;;EAErD;EACA,MAAMY,WAA6B,GAAG;IACpC3C,MAAM;IACNI,QAAQ;IACRD,KAAK;IACLyC,IAAI,EAAE,KAAK;IACXC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EAC/B,CAAC;;EAED;EACAd,aAAa,CAACD,YAAY,CAACnC,IAAI,CAAC8C,WAAW,CAAC;;EAE5C;EACAV,aAAa,CAACd,cAAc,GAAGc,aAAa,CAACF,MAAM,CAACX,MAAM,CACxD,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,GAAGC,KAAK,CAAC9B,YAAY,GAAG8B,KAAK,CAAClB,QAAQ,EAC7D,CACF,CAAC;EAED,OAAO;IAAED;EAAM,CAAC;AAClB,CAAC;AAED,OAAO,MAAM6C,aAAa,GAAGA,CAAChD,MAAc,EAAEI,QAAgB,KAAwB;EACpF,MAAM6C,WAAW,GAAGhB,aAAa,CAACF,MAAM,CAACM,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtC,MAAM,KAAKA,MAAM,CAAC;EACvE,IAAI,CAACiD,WAAW,IAAIA,WAAW,CAAC7C,QAAQ,GAAGA,QAAQ,EAAE,OAAO;IAAED,KAAK,EAAE;EAAE,CAAC;EAExE,MAAMA,KAAK,GAAG8C,WAAW,CAACzD,YAAY;EACtC,MAAM0D,OAAO,GAAG/C,KAAK,GAAGC,QAAQ;;EAEhC;EACA6B,aAAa,CAACN,IAAI,IAAIuB,OAAO;EAC7BjB,aAAa,CAACL,OAAO,GAAGK,aAAa,CAACN,IAAI;;EAE1C;EACA,MAAMwB,cAAc,GAAGF,WAAW,CAACzD,YAAY,GAAGyD,WAAW,CAACvC,QAAQ;EACtEuC,WAAW,CAACrC,cAAc,IAAIuC,cAAc,GAAG/C,QAAQ;;EAEvD;EACA6C,WAAW,CAAC7C,QAAQ,IAAIA,QAAQ;;EAEhC;EACA,IAAI6C,WAAW,CAAC7C,QAAQ,KAAK,CAAC,EAAE;IAC9B6B,aAAa,CAACF,MAAM,GAAGE,aAAa,CAACF,MAAM,CAACqB,MAAM,CAACd,CAAC,IAAIA,CAAC,CAACtC,MAAM,KAAKA,MAAM,CAAC;EAC9E,CAAC,MAAM;IACL;IACAiD,WAAW,CAACpC,eAAe,GAAGoC,WAAW,CAAC7C,QAAQ,IAAI6C,WAAW,CAACzD,YAAY,GAAGyD,WAAW,CAACvC,QAAQ,CAAC;EACxG;;EAEA;EACAuB,aAAa,CAACf,WAAW,GAAG,CAAC,GAAGe,aAAa,CAACF,MAAM,CAAC;;EAErD;EACA,MAAMY,WAA6B,GAAG;IACpC3C,MAAM;IACNI,QAAQ;IACRD,KAAK;IACLyC,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EAC/B,CAAC;;EAED;EACAd,aAAa,CAACD,YAAY,CAACnC,IAAI,CAAC8C,WAAW,CAAC;;EAE5C;EACAV,aAAa,CAACd,cAAc,GAAGc,aAAa,CAACF,MAAM,CAACX,MAAM,CACxD,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,GAAGC,KAAK,CAAC9B,YAAY,GAAG8B,KAAK,CAAClB,QAAQ,EAC7D,CACF,CAAC;;EAED;EACA6B,aAAa,CAACJ,QAAQ,GAAGI,aAAa,CAACF,MAAM,CAACX,MAAM,CAClD,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,GAAGC,KAAK,CAACT,eAAe,GAAGS,KAAK,CAACV,cAAc,EACtE,CACF,CAAC;EAED,OAAO;IAAET;EAAM,CAAC;AAClB,CAAC;AAED,OAAO,MAAMkD,eAAe,GAAGA,CAAA,KAAY;EACzC;EACApB,aAAa,CAACP,UAAU,IAAI,CAAC;;EAE7B;EACA,IAAI/B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;IACvBqC,aAAa,CAACH,WAAW,GAAGnC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,GAAG,MAAM;EACnE;;EAEA;EACA,MAAM0D,gBAAgB,GAAIhC,KAAY,IAAK;IACzC,MAAMiC,YAAY,GAAGtB,aAAa,CAACH,WAAW,KAAK,MAAM,GAAG,IAAI,GAAG,CAAC,IAAI;IACxE,MAAM0B,YAAY,GAAG7D,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;IACjD,MAAM6D,aAAa,GAAGF,YAAY,GAAGC,YAAY;IAEjD,MAAMjD,aAAa,GAAGe,KAAK,CAAC9B,YAAY;IACxC,MAAMkE,QAAQ,GAAG/D,IAAI,CAACG,GAAG,CAAC,CAAC,EAAES,aAAa,IAAI,CAAC,GAAGkD,aAAa,CAAC,CAAC;IAEjEnC,KAAK,CAACjB,YAAY,CAACR,IAAI,CAAC6D,QAAQ,CAAC;IACjC,IAAIpC,KAAK,CAACjB,YAAY,CAACC,MAAM,GAAG,EAAE,EAAE;MAClCgB,KAAK,CAACjB,YAAY,CAACsD,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9B;IAEArC,KAAK,CAAC9B,YAAY,GAAGkE,QAAQ;IAC7BpC,KAAK,CAACd,WAAW,GAAGkD,QAAQ,GAAGnD,aAAa;IAC5Ce,KAAK,CAACR,cAAc,GAAIQ,KAAK,CAACd,WAAW,GAAGD,aAAa,GAAI,GAAG;IAEhE,IAAIe,KAAK,CAAClB,QAAQ,GAAG,CAAC,EAAE;MACtBkB,KAAK,CAACT,eAAe,GAAGS,KAAK,CAAClB,QAAQ,IAAIkB,KAAK,CAAC9B,YAAY,GAAG8B,KAAK,CAACZ,QAAQ,CAAC;IAChF;IAEA,OAAOY,KAAK;EACd,CAAC;;EAED;EACAW,aAAa,CAACF,MAAM,GAAGE,aAAa,CAACF,MAAM,CAACP,GAAG,CAAC8B,gBAAgB,CAAC;EACjErB,aAAa,CAAChB,SAAS,GAAGgB,aAAa,CAAChB,SAAS,CAACO,GAAG,CAAC8B,gBAAgB,CAAC;;EAEvE;EACArB,aAAa,CAACf,WAAW,GAAG,CAAC,GAAGe,aAAa,CAACF,MAAM,CAAC;;EAErD;EACAE,aAAa,CAACd,cAAc,GAAGc,aAAa,CAACF,MAAM,CAACX,MAAM,CACxD,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,GAAGC,KAAK,CAAC9B,YAAY,GAAG8B,KAAK,CAAClB,QAAQ,EAC7D,CACF,CAAC;;EAED;EACA,MAAMwD,UAAU,GAAG3B,aAAa,CAACF,MAAM,CAACX,MAAM,CAC5C,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,GAAGC,KAAK,CAACT,eAAe,GAAGS,KAAK,CAACV,cAAc,EACtE,CACF,CAAC;EACDqB,aAAa,CAACV,UAAU,CAAC1B,IAAI,CAAC+D,UAAU,CAAC;EACzC,IAAI3B,aAAa,CAACV,UAAU,CAACjB,MAAM,GAAG,EAAE,EAAE;IACxC2B,aAAa,CAACV,UAAU,CAACoC,KAAK,CAAC,CAAC,CAAC,CAAC;EACpC;EAEA1B,aAAa,CAACJ,QAAQ,GAAG+B,UAAU;AACrC,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAY;EAC5C5B,aAAa,GAAGjB,mBAAmB,CAAC,CAAC;EACrC;EACAiB,aAAa,CAACf,WAAW,GAAG,CAAC,GAAGe,aAAa,CAACF,MAAM,CAAC;EACrDE,aAAa,CAACD,YAAY,GAAG,EAAE;AACjC,CAAC;AAED,OAAO,MAAM8B,eAAe,GAAGA,CAAC7D,IAAY,EAAED,MAAc,EAAEE,MAAc,KAAW;EACrF,MAAMC,KAAK,GAAGR,IAAI,CAACoE,KAAK,CAACpE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;EACpD,MAAM8C,QAAQ,GAAG3C,eAAe,CAACC,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,KAAK,CAAC;EAC7D8B,aAAa,CAAChB,SAAS,CAACpB,IAAI,CAAC6C,QAAQ,CAAC;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}