{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SAiNT\\\\Desktop\\\\2024\\\\Projects\\\\TraderGame - Java\\\\tradergame\\\\web-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport StockMarket from './components/StockMarket';\nimport Portfolio from './components/Portfolio';\nimport { getPortfolio, buyStock, sellStock, progressDay, resetPortfolio, savePortfolio, loadPortfolio, createStock } from './services/api';\nimport './styles/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [portfolio, setPortfolio] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [isScrolled, setIsScrolled] = useState(false);\n  useEffect(() => {\n    fetchPortfolio();\n\n    // Add scroll event listener\n    const handleScroll = () => {\n      if (window.scrollY > 50) {\n        setIsScrolled(true);\n      } else {\n        setIsScrolled(false);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  const fetchPortfolio = async () => {\n    try {\n      const data = await getPortfolio();\n      setPortfolio(data);\n    } catch (error) {\n      console.error('Error fetching portfolio:', error);\n      setErrorMessage('Failed to load portfolio data. Please try again.');\n    }\n  };\n  const handleBuyStock = async (symbol, quantity) => {\n    try {\n      const transaction = await buyStock(symbol, quantity);\n      setPortfolio(prevPortfolio => {\n        if (!prevPortfolio) return null;\n\n        // Find the stock in the portfolio\n        const stockIndex = prevPortfolio.ownedStocks.findIndex(s => s.symbol === symbol);\n        if (stockIndex >= 0) {\n          // Update existing stock\n          const updatedStocks = [...prevPortfolio.ownedStocks];\n          updatedStocks[stockIndex] = {\n            ...updatedStocks[stockIndex],\n            quantity: updatedStocks[stockIndex].quantity + quantity,\n            buyPrice: transaction.price\n          };\n          return {\n            ...prevPortfolio,\n            cash: prevPortfolio.cash - transaction.price * quantity,\n            ownedStocks: updatedStocks,\n            portfolioValue: calculatePortfolioValue(updatedStocks),\n            transactions: [...prevPortfolio.transactions, transaction]\n          };\n        } else {\n          // Add new stock to portfolio\n          const stockPool = prevPortfolio.stockPool;\n          const stockToBuy = stockPool.find(s => s.symbol === symbol);\n          if (!stockToBuy) return prevPortfolio;\n          const newStock = {\n            ...stockToBuy,\n            quantity,\n            buyPrice: transaction.price,\n            potentialProfit: 0,\n            realizedProfit: 0\n          };\n          return {\n            ...prevPortfolio,\n            cash: prevPortfolio.cash - transaction.price * quantity,\n            ownedStocks: [...prevPortfolio.ownedStocks, newStock],\n            portfolioValue: calculatePortfolioValue([...prevPortfolio.ownedStocks, newStock]),\n            transactions: [...prevPortfolio.transactions, transaction]\n          };\n        }\n      });\n      setSuccessMessage(`Successfully bought ${quantity} shares of ${symbol}`);\n      setTimeout(() => setSuccessMessage(null), 3000);\n    } catch (error) {\n      console.error('Error buying stock:', error);\n      setErrorMessage(`Failed to buy ${symbol}. Please try again.`);\n      setTimeout(() => setErrorMessage(null), 3000);\n    }\n  };\n  const handleSellStock = async (symbol, quantity) => {\n    try {\n      const transaction = await sellStock(symbol, quantity);\n      setPortfolio(prevPortfolio => {\n        if (!prevPortfolio) return null;\n\n        // Find the stock in the portfolio\n        const stockIndex = prevPortfolio.ownedStocks.findIndex(s => s.symbol === symbol);\n        if (stockIndex >= 0) {\n          const stock = prevPortfolio.ownedStocks[stockIndex];\n          const updatedStocks = [...prevPortfolio.ownedStocks];\n          if (stock.quantity <= quantity) {\n            // Remove stock if selling all shares\n            updatedStocks.splice(stockIndex, 1);\n          } else {\n            // Update quantity if selling some shares\n            updatedStocks[stockIndex] = {\n              ...stock,\n              quantity: stock.quantity - quantity,\n              realizedProfit: stock.realizedProfit + (transaction.price - stock.buyPrice) * quantity\n            };\n          }\n          return {\n            ...prevPortfolio,\n            cash: prevPortfolio.cash + transaction.price * quantity,\n            ownedStocks: updatedStocks,\n            portfolioValue: calculatePortfolioValue(updatedStocks),\n            transactions: [...prevPortfolio.transactions, transaction]\n          };\n        }\n        return prevPortfolio;\n      });\n      setSuccessMessage(`Successfully sold ${quantity} shares of ${symbol}`);\n      setTimeout(() => setSuccessMessage(null), 3000);\n    } catch (error) {\n      console.error('Error selling stock:', error);\n      setErrorMessage(`Failed to sell ${symbol}. Please try again.`);\n      setTimeout(() => setErrorMessage(null), 3000);\n    }\n  };\n  const handleProgressDay = async () => {\n    try {\n      const updatedPortfolio = await progressDay();\n      setPortfolio(updatedPortfolio);\n      setSuccessMessage('Successfully progressed to the next day');\n      setTimeout(() => setSuccessMessage(null), 3000);\n    } catch (error) {\n      console.error('Error progressing day:', error);\n      setErrorMessage('Failed to progress to the next day. Please try again.');\n      setTimeout(() => setErrorMessage(null), 3000);\n    }\n  };\n  const handleResetPortfolio = async () => {\n    try {\n      const newPortfolio = await resetPortfolio();\n      setPortfolio(newPortfolio);\n      setSuccessMessage('Portfolio has been reset');\n      setTimeout(() => setSuccessMessage(null), 3000);\n    } catch (error) {\n      console.error('Error resetting portfolio:', error);\n      setErrorMessage('Failed to reset portfolio. Please try again.');\n      setTimeout(() => setErrorMessage(null), 3000);\n    }\n  };\n  const handleSavePortfolio = async () => {\n    try {\n      await savePortfolio();\n      setSuccessMessage('Portfolio saved successfully');\n      setTimeout(() => setSuccessMessage(null), 3000);\n    } catch (error) {\n      console.error('Error saving portfolio:', error);\n      setErrorMessage('Failed to save portfolio. Please try again.');\n      setTimeout(() => setErrorMessage(null), 3000);\n    }\n  };\n  const handleLoadPortfolio = async () => {\n    try {\n      const loadedPortfolio = await loadPortfolio();\n      setPortfolio(loadedPortfolio);\n      setSuccessMessage('Portfolio loaded successfully');\n      setTimeout(() => setSuccessMessage(null), 3000);\n    } catch (error) {\n      console.error('Error loading portfolio:', error);\n      setErrorMessage('Failed to load portfolio. Please try again.');\n      setTimeout(() => setErrorMessage(null), 3000);\n    }\n  };\n  const handleCreateStock = async (name, symbol, sector) => {\n    try {\n      const newStock = await createStock(name, symbol, sector);\n      setPortfolio(prevPortfolio => {\n        if (!prevPortfolio) return null;\n        return {\n          ...prevPortfolio,\n          stockPool: [...prevPortfolio.stockPool, newStock]\n        };\n      });\n      setSuccessMessage(`Successfully created new stock: ${symbol}`);\n      setTimeout(() => setSuccessMessage(null), 3000);\n    } catch (error) {\n      console.error('Error creating stock:', error);\n      setErrorMessage(`Failed to create stock ${symbol}. Please try again.`);\n      setTimeout(() => setErrorMessage(null), 3000);\n    }\n  };\n  const calculatePortfolioValue = stocks => {\n    return stocks.reduce((total, stock) => total + stock.currentPrice * stock.quantity, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-background\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `site-header ${isScrolled ? 'scrolled' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"site-title\",\n          children: \"Trader Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      portfolio: portfolio,\n      onProgressDay: handleProgressDay,\n      onReset: handleResetPortfolio,\n      onSave: handleSavePortfolio,\n      onLoad: handleLoadPortfolio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container py-4\",\n      children: [successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-success p-3 rounded mb-4 fade-in\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-error p-3 rounded mb-4 fade-in\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-3 gap-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"md:col-span-2\",\n          children: portfolio && /*#__PURE__*/_jsxDEV(StockMarket, {\n            stocks: portfolio.stockPool,\n            onBuy: handleBuyStock,\n            onCreateStock: handleCreateStock,\n            marketState: portfolio.marketState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: portfolio && /*#__PURE__*/_jsxDEV(Portfolio, {\n            stocks: portfolio.ownedStocks,\n            pnlHistory: portfolio.pnlHistory,\n            onSell: handleSellStock\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"N2hJJ/URKd0zuPBToJGuYhmrklE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","StockMarket","Portfolio","getPortfolio","buyStock","sellStock","progressDay","resetPortfolio","savePortfolio","loadPortfolio","createStock","jsxDEV","_jsxDEV","App","_s","portfolio","setPortfolio","successMessage","setSuccessMessage","errorMessage","setErrorMessage","isScrolled","setIsScrolled","fetchPortfolio","handleScroll","window","scrollY","addEventListener","removeEventListener","data","error","console","handleBuyStock","symbol","quantity","transaction","prevPortfolio","stockIndex","ownedStocks","findIndex","s","updatedStocks","buyPrice","price","cash","portfolioValue","calculatePortfolioValue","transactions","stockPool","stockToBuy","find","newStock","potentialProfit","realizedProfit","setTimeout","handleSellStock","stock","splice","handleProgressDay","updatedPortfolio","handleResetPortfolio","newPortfolio","handleSavePortfolio","handleLoadPortfolio","loadedPortfolio","handleCreateStock","name","sector","stocks","reduce","total","currentPrice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onProgressDay","onReset","onSave","onLoad","onBuy","onCreateStock","marketState","pnlHistory","onSell","_c","$RefreshReg$"],"sources":["C:/Users/SAiNT/Desktop/2024/Projects/TraderGame - Java/tradergame/web-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StockPortfolio, StockTransaction } from './types';\r\nimport Header from './components/Header';\r\nimport StockMarket from './components/StockMarket';\r\nimport Portfolio from './components/Portfolio';\r\nimport { \r\n  getPortfolio, \r\n  getStocks, \r\n  getStockPool, \r\n  buyStock, \r\n  sellStock, \r\n  progressDay, \r\n  resetPortfolio,\r\n  savePortfolio,\r\n  loadPortfolio,\r\n  createStock\r\n} from './services/api';\r\nimport './styles/index.css';\r\n\r\nconst App: React.FC = () => {\r\n  const [portfolio, setPortfolio] = useState<StockPortfolio | null>(null);\r\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchPortfolio();\r\n    \r\n    // Add scroll event listener\r\n    const handleScroll = () => {\r\n      if (window.scrollY > 50) {\r\n        setIsScrolled(true);\r\n      } else {\r\n        setIsScrolled(false);\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('scroll', handleScroll);\r\n    \r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  const fetchPortfolio = async () => {\r\n    try {\r\n      const data = await getPortfolio();\r\n      setPortfolio(data);\r\n    } catch (error) {\r\n      console.error('Error fetching portfolio:', error);\r\n      setErrorMessage('Failed to load portfolio data. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleBuyStock = async (symbol: string, quantity: number) => {\r\n    try {\r\n      const transaction = await buyStock(symbol, quantity);\r\n      setPortfolio(prevPortfolio => {\r\n        if (!prevPortfolio) return null;\r\n        \r\n        // Find the stock in the portfolio\r\n        const stockIndex = prevPortfolio.ownedStocks.findIndex(s => s.symbol === symbol);\r\n        \r\n        if (stockIndex >= 0) {\r\n          // Update existing stock\r\n          const updatedStocks = [...prevPortfolio.ownedStocks];\r\n          updatedStocks[stockIndex] = {\r\n            ...updatedStocks[stockIndex],\r\n            quantity: updatedStocks[stockIndex].quantity + quantity,\r\n            buyPrice: transaction.price\r\n          };\r\n          \r\n          return {\r\n            ...prevPortfolio,\r\n            cash: prevPortfolio.cash - (transaction.price * quantity),\r\n            ownedStocks: updatedStocks,\r\n            portfolioValue: calculatePortfolioValue(updatedStocks),\r\n            transactions: [...prevPortfolio.transactions, transaction]\r\n          };\r\n        } else {\r\n          // Add new stock to portfolio\r\n          const stockPool = prevPortfolio.stockPool;\r\n          const stockToBuy = stockPool.find(s => s.symbol === symbol);\r\n          \r\n          if (!stockToBuy) return prevPortfolio;\r\n          \r\n          const newStock = {\r\n            ...stockToBuy,\r\n            quantity,\r\n            buyPrice: transaction.price,\r\n            potentialProfit: 0,\r\n            realizedProfit: 0\r\n          };\r\n          \r\n          return {\r\n            ...prevPortfolio,\r\n            cash: prevPortfolio.cash - (transaction.price * quantity),\r\n            ownedStocks: [...prevPortfolio.ownedStocks, newStock],\r\n            portfolioValue: calculatePortfolioValue([...prevPortfolio.ownedStocks, newStock]),\r\n            transactions: [...prevPortfolio.transactions, transaction]\r\n          };\r\n        }\r\n      });\r\n      \r\n      setSuccessMessage(`Successfully bought ${quantity} shares of ${symbol}`);\r\n      setTimeout(() => setSuccessMessage(null), 3000);\r\n    } catch (error) {\r\n      console.error('Error buying stock:', error);\r\n      setErrorMessage(`Failed to buy ${symbol}. Please try again.`);\r\n      setTimeout(() => setErrorMessage(null), 3000);\r\n    }\r\n  };\r\n\r\n  const handleSellStock = async (symbol: string, quantity: number) => {\r\n    try {\r\n      const transaction = await sellStock(symbol, quantity);\r\n      setPortfolio(prevPortfolio => {\r\n        if (!prevPortfolio) return null;\r\n        \r\n        // Find the stock in the portfolio\r\n        const stockIndex = prevPortfolio.ownedStocks.findIndex(s => s.symbol === symbol);\r\n        \r\n        if (stockIndex >= 0) {\r\n          const stock = prevPortfolio.ownedStocks[stockIndex];\r\n          const updatedStocks = [...prevPortfolio.ownedStocks];\r\n          \r\n          if (stock.quantity <= quantity) {\r\n            // Remove stock if selling all shares\r\n            updatedStocks.splice(stockIndex, 1);\r\n          } else {\r\n            // Update quantity if selling some shares\r\n            updatedStocks[stockIndex] = {\r\n              ...stock,\r\n              quantity: stock.quantity - quantity,\r\n              realizedProfit: stock.realizedProfit + (transaction.price - stock.buyPrice) * quantity\r\n            };\r\n          }\r\n          \r\n          return {\r\n            ...prevPortfolio,\r\n            cash: prevPortfolio.cash + (transaction.price * quantity),\r\n            ownedStocks: updatedStocks,\r\n            portfolioValue: calculatePortfolioValue(updatedStocks),\r\n            transactions: [...prevPortfolio.transactions, transaction]\r\n          };\r\n        }\r\n        \r\n        return prevPortfolio;\r\n      });\r\n      \r\n      setSuccessMessage(`Successfully sold ${quantity} shares of ${symbol}`);\r\n      setTimeout(() => setSuccessMessage(null), 3000);\r\n    } catch (error) {\r\n      console.error('Error selling stock:', error);\r\n      setErrorMessage(`Failed to sell ${symbol}. Please try again.`);\r\n      setTimeout(() => setErrorMessage(null), 3000);\r\n    }\r\n  };\r\n\r\n  const handleProgressDay = async () => {\r\n    try {\r\n      const updatedPortfolio = await progressDay();\r\n      setPortfolio(updatedPortfolio);\r\n      setSuccessMessage('Successfully progressed to the next day');\r\n      setTimeout(() => setSuccessMessage(null), 3000);\r\n    } catch (error) {\r\n      console.error('Error progressing day:', error);\r\n      setErrorMessage('Failed to progress to the next day. Please try again.');\r\n      setTimeout(() => setErrorMessage(null), 3000);\r\n    }\r\n  };\r\n\r\n  const handleResetPortfolio = async () => {\r\n    try {\r\n      const newPortfolio = await resetPortfolio();\r\n      setPortfolio(newPortfolio);\r\n      setSuccessMessage('Portfolio has been reset');\r\n      setTimeout(() => setSuccessMessage(null), 3000);\r\n    } catch (error) {\r\n      console.error('Error resetting portfolio:', error);\r\n      setErrorMessage('Failed to reset portfolio. Please try again.');\r\n      setTimeout(() => setErrorMessage(null), 3000);\r\n    }\r\n  };\r\n\r\n  const handleSavePortfolio = async () => {\r\n    try {\r\n      await savePortfolio();\r\n      setSuccessMessage('Portfolio saved successfully');\r\n      setTimeout(() => setSuccessMessage(null), 3000);\r\n    } catch (error) {\r\n      console.error('Error saving portfolio:', error);\r\n      setErrorMessage('Failed to save portfolio. Please try again.');\r\n      setTimeout(() => setErrorMessage(null), 3000);\r\n    }\r\n  };\r\n\r\n  const handleLoadPortfolio = async () => {\r\n    try {\r\n      const loadedPortfolio = await loadPortfolio();\r\n      setPortfolio(loadedPortfolio);\r\n      setSuccessMessage('Portfolio loaded successfully');\r\n      setTimeout(() => setSuccessMessage(null), 3000);\r\n    } catch (error) {\r\n      console.error('Error loading portfolio:', error);\r\n      setErrorMessage('Failed to load portfolio. Please try again.');\r\n      setTimeout(() => setErrorMessage(null), 3000);\r\n    }\r\n  };\r\n\r\n  const handleCreateStock = async (name: string, symbol: string, sector: string) => {\r\n    try {\r\n      const newStock = await createStock(name, symbol, sector);\r\n      setPortfolio(prevPortfolio => {\r\n        if (!prevPortfolio) return null;\r\n        \r\n        return {\r\n          ...prevPortfolio,\r\n          stockPool: [...prevPortfolio.stockPool, newStock]\r\n        };\r\n      });\r\n      \r\n      setSuccessMessage(`Successfully created new stock: ${symbol}`);\r\n      setTimeout(() => setSuccessMessage(null), 3000);\r\n    } catch (error) {\r\n      console.error('Error creating stock:', error);\r\n      setErrorMessage(`Failed to create stock ${symbol}. Please try again.`);\r\n      setTimeout(() => setErrorMessage(null), 3000);\r\n    }\r\n  };\r\n\r\n  const calculatePortfolioValue = (stocks: any[]) => {\r\n    return stocks.reduce((total, stock) => total + (stock.currentPrice * stock.quantity), 0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-background\">\r\n      <div className={`site-header ${isScrolled ? 'scrolled' : ''}`}>\r\n        <div className=\"container\">\r\n          <h1 className=\"site-title\">Trader Game</h1>\r\n        </div>\r\n      </div>\r\n      \r\n      <Header \r\n        portfolio={portfolio}\r\n        onProgressDay={handleProgressDay}\r\n        onReset={handleResetPortfolio}\r\n        onSave={handleSavePortfolio}\r\n        onLoad={handleLoadPortfolio}\r\n      />\r\n      \r\n      <main className=\"container py-4\">\r\n        {successMessage && (\r\n          <div className=\"bg-success p-3 rounded mb-4 fade-in\">\r\n            <p>{successMessage}</p>\r\n          </div>\r\n        )}\r\n        \r\n        {errorMessage && (\r\n          <div className=\"bg-error p-3 rounded mb-4 fade-in\">\r\n            <p>{errorMessage}</p>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n          <div className=\"md:col-span-2\">\r\n            {portfolio && (\r\n              <StockMarket \r\n                stocks={portfolio.stockPool}\r\n                onBuy={handleBuyStock}\r\n                onCreateStock={handleCreateStock}\r\n                marketState={portfolio.marketState}\r\n              />\r\n            )}\r\n          </div>\r\n          \r\n          <div>\r\n            {portfolio && (\r\n              <Portfolio \r\n                stocks={portfolio.ownedStocks}\r\n                pnlHistory={portfolio.pnlHistory}\r\n                onSell={handleSellStock}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}